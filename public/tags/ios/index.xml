<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ios on Jernej Strasner</title><link>http://jernejstrasner.com/tags/ios/</link><description>Recent content in ios on Jernej Strasner</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Jernej Strasner</copyright><lastBuildDate>Wed, 01 Oct 2014 11:42:36 +0200</lastBuildDate><atom:link href="http://jernejstrasner.com/tags/ios/index.xml" rel="self" type="application/rss+xml"/><item><title>NSFastEnumeration in Swift</title><link>http://jernejstrasner.com/posts/2015-07-06-nsfastenumeration-in-swift/</link><pubDate>Wed, 01 Oct 2014 11:42:36 +0200</pubDate><guid>http://jernejstrasner.com/posts/2015-07-06-nsfastenumeration-in-swift/</guid><description>I spent the past few weeks digging into Swift while working on PSPDFKit. Today I was trying to enumerate a directory recursively. I resorted to NSFileManager and its method enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:. It returns an NSDirectoryEnumerator object which supports NSFastEnumeration. That means you can use the for-in loop in Objective-C. Without thinking, I wrote a for-in loop in Swift. Not so fast.
Type NSDirectoryEnumerator does not conform to protocol SequenceType.
Apple should have supported this.</description></item><item><title>Singleton Pattern in Swift</title><link>http://jernejstrasner.com/posts/2015-07-06-singleton-pattern-in-swift/</link><pubDate>Sat, 07 Jun 2014 14:20:26 +0200</pubDate><guid>http://jernejstrasner.com/posts/2015-07-06-singleton-pattern-in-swift/</guid><description>Like just about any other iOS developer, I was caught completely by surprise when Apple announced Swift. I was expecting modest improvements to Objective-C, maybe even an Objective-C 3.0 release, but nothing as wild as a new language. But I got excited, really excited, when I watched the state of the union video (no, I was not one of the lucky WWDC ticket lottery winners). I started reading the Swift book right away.</description></item><item><title>Smooth gradients on iOS/OSX</title><link>http://jernejstrasner.com/posts/2013-10-17-smooth-gradients-ios/</link><pubDate>Wed, 08 Jan 2014 23:00:00 +0000</pubDate><guid>http://jernejstrasner.com/posts/2013-10-17-smooth-gradients-ios/</guid><description>UPDATE: Updated for Swift, Swift 2 and packaged into a drop-in replacement for UIView.
I thought drawing gradients on iOS is easy. Well, until our designer gave me this:
I went on and implemented the drawRect: method on a custom UIView. I used CGGradient and wrote the drawing code. I ran the project in the simulator and noticed that the gradient was quite different. Ran on the device, same thing.</description></item></channel></rss>